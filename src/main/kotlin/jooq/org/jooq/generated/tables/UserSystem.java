/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.UserSystemRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSystem extends TableImpl<UserSystemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_system</code>
     */
    public static final UserSystem USER_SYSTEM = new UserSystem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSystemRecord> getRecordType() {
        return UserSystemRecord.class;
    }

    /**
     * The column <code>user_system.id</code>.
     */
    public final TableField<UserSystemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>user_system.login</code>.
     */
    public final TableField<UserSystemRecord, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>user_system.password</code>.
     */
    public final TableField<UserSystemRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>user_system.date_change_password</code>.
     */
    public final TableField<UserSystemRecord, LocalDate> DATE_CHANGE_PASSWORD = createField(DSL.name("date_change_password"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>user_system.date_registration</code>.
     */
    public final TableField<UserSystemRecord, LocalDate> DATE_REGISTRATION = createField(DSL.name("date_registration"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>user_system.online_date</code>.
     */
    public final TableField<UserSystemRecord, LocalDate> ONLINE_DATE = createField(DSL.name("online_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>user_system.locked</code>.
     */
    public final TableField<UserSystemRecord, Boolean> LOCKED = createField(DSL.name("locked"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>user_system.fio</code>.
     */
    public final TableField<UserSystemRecord, String> FIO = createField(DSL.name("fio"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>user_system.division_id</code>.
     */
    public final TableField<UserSystemRecord, Long> DIVISION_ID = createField(DSL.name("division_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private UserSystem(Name alias, Table<UserSystemRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserSystem(Name alias, Table<UserSystemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user_system</code> table reference
     */
    public UserSystem(String alias) {
        this(DSL.name(alias), USER_SYSTEM);
    }

    /**
     * Create an aliased <code>user_system</code> table reference
     */
    public UserSystem(Name alias) {
        this(alias, USER_SYSTEM);
    }

    /**
     * Create a <code>user_system</code> table reference
     */
    public UserSystem() {
        this(DSL.name("user_system"), null);
    }

    public <O extends Record> UserSystem(Table<O> child, ForeignKey<O, UserSystemRecord> key) {
        super(child, key, USER_SYSTEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<UserSystemRecord, Long> getIdentity() {
        return (Identity<UserSystemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserSystemRecord> getPrimaryKey() {
        return Keys.USER_SYSTEM_PKEY;
    }

    @Override
    public List<UniqueKey<UserSystemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USER_SYSTEM_LOGIN_KEY);
    }

    @Override
    public List<ForeignKey<UserSystemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_SYSTEM__FK_DIVISION_USER_SYSTEM);
    }

    private transient Division _division;

    public Division division() {
        if (_division == null)
            _division = new Division(this, Keys.USER_SYSTEM__FK_DIVISION_USER_SYSTEM);

        return _division;
    }

    @Override
    public UserSystem as(String alias) {
        return new UserSystem(DSL.name(alias), this);
    }

    @Override
    public UserSystem as(Name alias) {
        return new UserSystem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSystem rename(String name) {
        return new UserSystem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSystem rename(Name name) {
        return new UserSystem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, LocalDate, LocalDate, LocalDate, Boolean, String, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
