/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.generated.tables.ArchitecturalSupervisionRegister;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArchitecturalSupervisionRegisterRecord extends UpdatableRecordImpl<ArchitecturalSupervisionRegisterRecord> implements Record10<Long, Long, LocalDateTime, Integer, LocalDateTime, Integer, String, String, Long, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>architectural_supervision_register.id</code>.
     */
    public ArchitecturalSupervisionRegisterRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>architectural_supervision_register.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>architectural_supervision_register.employee_id</code>.
     */
    public ArchitecturalSupervisionRegisterRecord setEmployeeId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>architectural_supervision_register.employee_id</code>.
     */
    public Long getEmployeeId() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>architectural_supervision_register.according_schedule_date</code>.
     */
    public ArchitecturalSupervisionRegisterRecord setAccordingScheduleDate(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.according_schedule_date</code>.
     */
    public LocalDateTime getAccordingScheduleDate() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for
     * <code>architectural_supervision_register.according_shift</code>.
     */
    public ArchitecturalSupervisionRegisterRecord setAccordingShift(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.according_shift</code>.
     */
    public Integer getAccordingShift() {
        return (Integer) get(3);
    }

    /**
     * Setter for
     * <code>architectural_supervision_register.actual_verification_date</code>.
     */
    public ArchitecturalSupervisionRegisterRecord setActualVerificationDate(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.actual_verification_date</code>.
     */
    public LocalDateTime getActualVerificationDate() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for
     * <code>architectural_supervision_register.actual_verification_shift</code>.
     */
    public ArchitecturalSupervisionRegisterRecord setActualVerificationShift(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.actual_verification_shift</code>.
     */
    public Integer getActualVerificationShift() {
        return (Integer) get(5);
    }

    /**
     * Setter for
     * <code>architectural_supervision_register.identified_inconsistencies</code>.
     */
    public ArchitecturalSupervisionRegisterRecord setIdentifiedInconsistencies(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.identified_inconsistencies</code>.
     */
    public String getIdentifiedInconsistencies() {
        return (String) get(6);
    }

    /**
     * Setter for
     * <code>architectural_supervision_register.reasons_noncompliance</code>.
     */
    public ArchitecturalSupervisionRegisterRecord setReasonsNoncompliance(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.reasons_noncompliance</code>.
     */
    public String getReasonsNoncompliance() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>architectural_supervision_register.chief_engineer</code>.
     */
    public ArchitecturalSupervisionRegisterRecord setChiefEngineer(Long value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.chief_engineer</code>.
     */
    public Long getChiefEngineer() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>architectural_supervision_register.datecheck</code>.
     */
    public ArchitecturalSupervisionRegisterRecord setDatecheck(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>architectural_supervision_register.datecheck</code>.
     */
    public LocalDateTime getDatecheck() {
        return (LocalDateTime) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, LocalDateTime, Integer, LocalDateTime, Integer, String, String, Long, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, Long, LocalDateTime, Integer, LocalDateTime, Integer, String, String, Long, LocalDateTime> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER.ID;
    }

    @Override
    public Field<Long> field2() {
        return ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER.EMPLOYEE_ID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER.ACCORDING_SCHEDULE_DATE;
    }

    @Override
    public Field<Integer> field4() {
        return ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER.ACCORDING_SHIFT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER.ACTUAL_VERIFICATION_DATE;
    }

    @Override
    public Field<Integer> field6() {
        return ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER.ACTUAL_VERIFICATION_SHIFT;
    }

    @Override
    public Field<String> field7() {
        return ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER.IDENTIFIED_INCONSISTENCIES;
    }

    @Override
    public Field<String> field8() {
        return ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER.REASONS_NONCOMPLIANCE;
    }

    @Override
    public Field<Long> field9() {
        return ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER.CHIEF_ENGINEER;
    }

    @Override
    public Field<LocalDateTime> field10() {
        return ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER.DATECHECK;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getEmployeeId();
    }

    @Override
    public LocalDateTime component3() {
        return getAccordingScheduleDate();
    }

    @Override
    public Integer component4() {
        return getAccordingShift();
    }

    @Override
    public LocalDateTime component5() {
        return getActualVerificationDate();
    }

    @Override
    public Integer component6() {
        return getActualVerificationShift();
    }

    @Override
    public String component7() {
        return getIdentifiedInconsistencies();
    }

    @Override
    public String component8() {
        return getReasonsNoncompliance();
    }

    @Override
    public Long component9() {
        return getChiefEngineer();
    }

    @Override
    public LocalDateTime component10() {
        return getDatecheck();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getEmployeeId();
    }

    @Override
    public LocalDateTime value3() {
        return getAccordingScheduleDate();
    }

    @Override
    public Integer value4() {
        return getAccordingShift();
    }

    @Override
    public LocalDateTime value5() {
        return getActualVerificationDate();
    }

    @Override
    public Integer value6() {
        return getActualVerificationShift();
    }

    @Override
    public String value7() {
        return getIdentifiedInconsistencies();
    }

    @Override
    public String value8() {
        return getReasonsNoncompliance();
    }

    @Override
    public Long value9() {
        return getChiefEngineer();
    }

    @Override
    public LocalDateTime value10() {
        return getDatecheck();
    }

    @Override
    public ArchitecturalSupervisionRegisterRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ArchitecturalSupervisionRegisterRecord value2(Long value) {
        setEmployeeId(value);
        return this;
    }

    @Override
    public ArchitecturalSupervisionRegisterRecord value3(LocalDateTime value) {
        setAccordingScheduleDate(value);
        return this;
    }

    @Override
    public ArchitecturalSupervisionRegisterRecord value4(Integer value) {
        setAccordingShift(value);
        return this;
    }

    @Override
    public ArchitecturalSupervisionRegisterRecord value5(LocalDateTime value) {
        setActualVerificationDate(value);
        return this;
    }

    @Override
    public ArchitecturalSupervisionRegisterRecord value6(Integer value) {
        setActualVerificationShift(value);
        return this;
    }

    @Override
    public ArchitecturalSupervisionRegisterRecord value7(String value) {
        setIdentifiedInconsistencies(value);
        return this;
    }

    @Override
    public ArchitecturalSupervisionRegisterRecord value8(String value) {
        setReasonsNoncompliance(value);
        return this;
    }

    @Override
    public ArchitecturalSupervisionRegisterRecord value9(Long value) {
        setChiefEngineer(value);
        return this;
    }

    @Override
    public ArchitecturalSupervisionRegisterRecord value10(LocalDateTime value) {
        setDatecheck(value);
        return this;
    }

    @Override
    public ArchitecturalSupervisionRegisterRecord values(Long value1, Long value2, LocalDateTime value3, Integer value4, LocalDateTime value5, Integer value6, String value7, String value8, Long value9, LocalDateTime value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ArchitecturalSupervisionRegisterRecord
     */
    public ArchitecturalSupervisionRegisterRecord() {
        super(ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER);
    }

    /**
     * Create a detached, initialised ArchitecturalSupervisionRegisterRecord
     */
    public ArchitecturalSupervisionRegisterRecord(Long id, Long employeeId, LocalDateTime accordingScheduleDate, Integer accordingShift, LocalDateTime actualVerificationDate, Integer actualVerificationShift, String identifiedInconsistencies, String reasonsNoncompliance, Long chiefEngineer, LocalDateTime datecheck) {
        super(ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER);

        setId(id);
        setEmployeeId(employeeId);
        setAccordingScheduleDate(accordingScheduleDate);
        setAccordingShift(accordingShift);
        setActualVerificationDate(actualVerificationDate);
        setActualVerificationShift(actualVerificationShift);
        setIdentifiedInconsistencies(identifiedInconsistencies);
        setReasonsNoncompliance(reasonsNoncompliance);
        setChiefEngineer(chiefEngineer);
        setDatecheck(datecheck);
    }

    /**
     * Create a detached, initialised ArchitecturalSupervisionRegisterRecord
     */
    public ArchitecturalSupervisionRegisterRecord(org.jooq.generated.tables.pojos.ArchitecturalSupervisionRegister value) {
        super(ArchitecturalSupervisionRegister.ARCHITECTURAL_SUPERVISION_REGISTER);

        if (value != null) {
            setId(value.getId());
            setEmployeeId(value.getEmployeeId());
            setAccordingScheduleDate(value.getAccordingScheduleDate());
            setAccordingShift(value.getAccordingShift());
            setActualVerificationDate(value.getActualVerificationDate());
            setActualVerificationShift(value.getActualVerificationShift());
            setIdentifiedInconsistencies(value.getIdentifiedInconsistencies());
            setReasonsNoncompliance(value.getReasonsNoncompliance());
            setChiefEngineer(value.getChiefEngineer());
            setDatecheck(value.getDatecheck());
        }
    }
}
