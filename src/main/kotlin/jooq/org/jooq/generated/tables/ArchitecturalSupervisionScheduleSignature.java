/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.ArchitecturalSupervisionScheduleSignatureRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArchitecturalSupervisionScheduleSignature extends TableImpl<ArchitecturalSupervisionScheduleSignatureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>architectural_supervision_schedule_signature</code>
     */
    public static final ArchitecturalSupervisionScheduleSignature ARCHITECTURAL_SUPERVISION_SCHEDULE_SIGNATURE = new ArchitecturalSupervisionScheduleSignature();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArchitecturalSupervisionScheduleSignatureRecord> getRecordType() {
        return ArchitecturalSupervisionScheduleSignatureRecord.class;
    }

    /**
     * The column
     * <code>architectural_supervision_schedule_signature.employee_id</code>.
     */
    public final TableField<ArchitecturalSupervisionScheduleSignatureRecord, Long> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>architectural_supervision_schedule_signature.architectural_supervision_schedule_id</code>.
     */
    public final TableField<ArchitecturalSupervisionScheduleSignatureRecord, Long> ARCHITECTURAL_SUPERVISION_SCHEDULE_ID = createField(DSL.name("architectural_supervision_schedule_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private ArchitecturalSupervisionScheduleSignature(Name alias, Table<ArchitecturalSupervisionScheduleSignatureRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArchitecturalSupervisionScheduleSignature(Name alias, Table<ArchitecturalSupervisionScheduleSignatureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>architectural_supervision_schedule_signature</code> table reference
     */
    public ArchitecturalSupervisionScheduleSignature(String alias) {
        this(DSL.name(alias), ARCHITECTURAL_SUPERVISION_SCHEDULE_SIGNATURE);
    }

    /**
     * Create an aliased
     * <code>architectural_supervision_schedule_signature</code> table reference
     */
    public ArchitecturalSupervisionScheduleSignature(Name alias) {
        this(alias, ARCHITECTURAL_SUPERVISION_SCHEDULE_SIGNATURE);
    }

    /**
     * Create a <code>architectural_supervision_schedule_signature</code> table
     * reference
     */
    public ArchitecturalSupervisionScheduleSignature() {
        this(DSL.name("architectural_supervision_schedule_signature"), null);
    }

    public <O extends Record> ArchitecturalSupervisionScheduleSignature(Table<O> child, ForeignKey<O, ArchitecturalSupervisionScheduleSignatureRecord> key) {
        super(child, key, ARCHITECTURAL_SUPERVISION_SCHEDULE_SIGNATURE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ArchitecturalSupervisionScheduleSignatureRecord, Long> getIdentity() {
        return (Identity<ArchitecturalSupervisionScheduleSignatureRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArchitecturalSupervisionScheduleSignatureRecord> getPrimaryKey() {
        return Keys.ARCHITECTURAL_SUPERVISION_SCHEDULE_SIGNATURE_PKEY;
    }

    @Override
    public List<ForeignKey<ArchitecturalSupervisionScheduleSignatureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ARCHITECTURAL_SUPERVISION_SCHEDULE_SIGNATURE__FK_EMPLOYEE_ARCHITECTURAL_SUPERVISION_SCHEDULE_SIGNATURE, Keys.ARCHITECTURAL_SUPERVISION_SCHEDULE_SIGNATURE__FK_ARCHITECTURAL_SUPERVISION_SCHEDULE__SIGNATURE);
    }

    private transient UserSystem _userSystem;
    private transient ArchitecturalSupervisionSchedule _architecturalSupervisionSchedule;

    public UserSystem userSystem() {
        if (_userSystem == null)
            _userSystem = new UserSystem(this, Keys.ARCHITECTURAL_SUPERVISION_SCHEDULE_SIGNATURE__FK_EMPLOYEE_ARCHITECTURAL_SUPERVISION_SCHEDULE_SIGNATURE);

        return _userSystem;
    }

    public ArchitecturalSupervisionSchedule architecturalSupervisionSchedule() {
        if (_architecturalSupervisionSchedule == null)
            _architecturalSupervisionSchedule = new ArchitecturalSupervisionSchedule(this, Keys.ARCHITECTURAL_SUPERVISION_SCHEDULE_SIGNATURE__FK_ARCHITECTURAL_SUPERVISION_SCHEDULE__SIGNATURE);

        return _architecturalSupervisionSchedule;
    }

    @Override
    public ArchitecturalSupervisionScheduleSignature as(String alias) {
        return new ArchitecturalSupervisionScheduleSignature(DSL.name(alias), this);
    }

    @Override
    public ArchitecturalSupervisionScheduleSignature as(Name alias) {
        return new ArchitecturalSupervisionScheduleSignature(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchitecturalSupervisionScheduleSignature rename(String name) {
        return new ArchitecturalSupervisionScheduleSignature(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchitecturalSupervisionScheduleSignature rename(Name name) {
        return new ArchitecturalSupervisionScheduleSignature(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
