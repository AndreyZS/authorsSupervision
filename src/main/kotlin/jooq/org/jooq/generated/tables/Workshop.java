/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.WorkshopRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Workshop extends TableImpl<WorkshopRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>workshop</code>
     */
    public static final Workshop WORKSHOP = new Workshop();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkshopRecord> getRecordType() {
        return WorkshopRecord.class;
    }

    /**
     * The column <code>workshop.id</code>.
     */
    public final TableField<WorkshopRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>workshop.name</code>.
     */
    public final TableField<WorkshopRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>workshop.company_id</code>.
     */
    public final TableField<WorkshopRecord, Long> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private Workshop(Name alias, Table<WorkshopRecord> aliased) {
        this(alias, aliased, null);
    }

    private Workshop(Name alias, Table<WorkshopRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>workshop</code> table reference
     */
    public Workshop(String alias) {
        this(DSL.name(alias), WORKSHOP);
    }

    /**
     * Create an aliased <code>workshop</code> table reference
     */
    public Workshop(Name alias) {
        this(alias, WORKSHOP);
    }

    /**
     * Create a <code>workshop</code> table reference
     */
    public Workshop() {
        this(DSL.name("workshop"), null);
    }

    public <O extends Record> Workshop(Table<O> child, ForeignKey<O, WorkshopRecord> key) {
        super(child, key, WORKSHOP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<WorkshopRecord, Long> getIdentity() {
        return (Identity<WorkshopRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkshopRecord> getPrimaryKey() {
        return Keys.WORKSHOP_PKEY;
    }

    @Override
    public List<UniqueKey<WorkshopRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.WORKSHOP_NAME_KEY);
    }

    @Override
    public List<ForeignKey<WorkshopRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WORKSHOP__FK_COMPANY_WORKSHOP);
    }

    private transient Company _company;

    public Company company() {
        if (_company == null)
            _company = new Company(this, Keys.WORKSHOP__FK_COMPANY_WORKSHOP);

        return _company;
    }

    @Override
    public Workshop as(String alias) {
        return new Workshop(DSL.name(alias), this);
    }

    @Override
    public Workshop as(Name alias) {
        return new Workshop(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Workshop rename(String name) {
        return new Workshop(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Workshop rename(Name name) {
        return new Workshop(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
