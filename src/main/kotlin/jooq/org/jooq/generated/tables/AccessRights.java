/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.AccessRightsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessRights extends TableImpl<AccessRightsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>access_rights</code>
     */
    public static final AccessRights ACCESS_RIGHTS = new AccessRights();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccessRightsRecord> getRecordType() {
        return AccessRightsRecord.class;
    }

    /**
     * The column <code>access_rights.id</code>.
     */
    public final TableField<AccessRightsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>access_rights.name</code>.
     */
    public final TableField<AccessRightsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    private AccessRights(Name alias, Table<AccessRightsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccessRights(Name alias, Table<AccessRightsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>access_rights</code> table reference
     */
    public AccessRights(String alias) {
        this(DSL.name(alias), ACCESS_RIGHTS);
    }

    /**
     * Create an aliased <code>access_rights</code> table reference
     */
    public AccessRights(Name alias) {
        this(alias, ACCESS_RIGHTS);
    }

    /**
     * Create a <code>access_rights</code> table reference
     */
    public AccessRights() {
        this(DSL.name("access_rights"), null);
    }

    public <O extends Record> AccessRights(Table<O> child, ForeignKey<O, AccessRightsRecord> key) {
        super(child, key, ACCESS_RIGHTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<AccessRightsRecord, Long> getIdentity() {
        return (Identity<AccessRightsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccessRightsRecord> getPrimaryKey() {
        return Keys.ACCESS_RIGHTS_PKEY;
    }

    @Override
    public AccessRights as(String alias) {
        return new AccessRights(DSL.name(alias), this);
    }

    @Override
    public AccessRights as(Name alias) {
        return new AccessRights(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessRights rename(String name) {
        return new AccessRights(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessRights rename(Name name) {
        return new AccessRights(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
