/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.ArchitecturalSupervisionRegisterRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArchitecturalSupervisionRegister extends TableImpl<ArchitecturalSupervisionRegisterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>architectural_supervision_register</code>
     */
    public static final ArchitecturalSupervisionRegister ARCHITECTURAL_SUPERVISION_REGISTER = new ArchitecturalSupervisionRegister();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArchitecturalSupervisionRegisterRecord> getRecordType() {
        return ArchitecturalSupervisionRegisterRecord.class;
    }

    /**
     * The column <code>architectural_supervision_register.id</code>.
     */
    public final TableField<ArchitecturalSupervisionRegisterRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>architectural_supervision_register.employee_id</code>.
     */
    public final TableField<ArchitecturalSupervisionRegisterRecord, Long> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>architectural_supervision_register.according_schedule_date</code>.
     */
    public final TableField<ArchitecturalSupervisionRegisterRecord, LocalDateTime> ACCORDING_SCHEDULE_DATE = createField(DSL.name("according_schedule_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>architectural_supervision_register.according_shift</code>.
     */
    public final TableField<ArchitecturalSupervisionRegisterRecord, Integer> ACCORDING_SHIFT = createField(DSL.name("according_shift"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>architectural_supervision_register.actual_verification_date</code>.
     */
    public final TableField<ArchitecturalSupervisionRegisterRecord, LocalDateTime> ACTUAL_VERIFICATION_DATE = createField(DSL.name("actual_verification_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>architectural_supervision_register.actual_verification_shift</code>.
     */
    public final TableField<ArchitecturalSupervisionRegisterRecord, Integer> ACTUAL_VERIFICATION_SHIFT = createField(DSL.name("actual_verification_shift"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>architectural_supervision_register.identified_inconsistencies</code>.
     */
    public final TableField<ArchitecturalSupervisionRegisterRecord, String> IDENTIFIED_INCONSISTENCIES = createField(DSL.name("identified_inconsistencies"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>architectural_supervision_register.reasons_noncompliance</code>.
     */
    public final TableField<ArchitecturalSupervisionRegisterRecord, String> REASONS_NONCOMPLIANCE = createField(DSL.name("reasons_noncompliance"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>architectural_supervision_register.chief_engineer</code>.
     */
    public final TableField<ArchitecturalSupervisionRegisterRecord, Long> CHIEF_ENGINEER = createField(DSL.name("chief_engineer"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>architectural_supervision_register.datecheck</code>.
     */
    public final TableField<ArchitecturalSupervisionRegisterRecord, LocalDateTime> DATECHECK = createField(DSL.name("datecheck"), SQLDataType.LOCALDATETIME(6), this, "");

    private ArchitecturalSupervisionRegister(Name alias, Table<ArchitecturalSupervisionRegisterRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArchitecturalSupervisionRegister(Name alias, Table<ArchitecturalSupervisionRegisterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>architectural_supervision_register</code> table
     * reference
     */
    public ArchitecturalSupervisionRegister(String alias) {
        this(DSL.name(alias), ARCHITECTURAL_SUPERVISION_REGISTER);
    }

    /**
     * Create an aliased <code>architectural_supervision_register</code> table
     * reference
     */
    public ArchitecturalSupervisionRegister(Name alias) {
        this(alias, ARCHITECTURAL_SUPERVISION_REGISTER);
    }

    /**
     * Create a <code>architectural_supervision_register</code> table reference
     */
    public ArchitecturalSupervisionRegister() {
        this(DSL.name("architectural_supervision_register"), null);
    }

    public <O extends Record> ArchitecturalSupervisionRegister(Table<O> child, ForeignKey<O, ArchitecturalSupervisionRegisterRecord> key) {
        super(child, key, ARCHITECTURAL_SUPERVISION_REGISTER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ArchitecturalSupervisionRegisterRecord, Long> getIdentity() {
        return (Identity<ArchitecturalSupervisionRegisterRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArchitecturalSupervisionRegisterRecord> getPrimaryKey() {
        return Keys.ARCHITECTURAL_SUPERVISION_REGISTER_PKEY;
    }

    @Override
    public List<ForeignKey<ArchitecturalSupervisionRegisterRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ARCHITECTURAL_SUPERVISION_REGISTER__FK_ASR, Keys.ARCHITECTURAL_SUPERVISION_REGISTER__FK_EMPLOYEE_COPYRIGHT_SUPERVISION_REPORT, Keys.ARCHITECTURAL_SUPERVISION_REGISTER__FK_CHIEF_ENGINEER_ARCHITECTURAL_SUPERVISION_REGISTER);
    }

    private transient CopyrightSupervisionReport _copyrightSupervisionReport;
    private transient UserSystem _fkEmployeeCopyrightSupervisionReport;
    private transient UserSystem _fkChiefEngineerArchitecturalSupervisionRegister;

    public CopyrightSupervisionReport copyrightSupervisionReport() {
        if (_copyrightSupervisionReport == null)
            _copyrightSupervisionReport = new CopyrightSupervisionReport(this, Keys.ARCHITECTURAL_SUPERVISION_REGISTER__FK_ASR);

        return _copyrightSupervisionReport;
    }

    public UserSystem fkEmployeeCopyrightSupervisionReport() {
        if (_fkEmployeeCopyrightSupervisionReport == null)
            _fkEmployeeCopyrightSupervisionReport = new UserSystem(this, Keys.ARCHITECTURAL_SUPERVISION_REGISTER__FK_EMPLOYEE_COPYRIGHT_SUPERVISION_REPORT);

        return _fkEmployeeCopyrightSupervisionReport;
    }

    public UserSystem fkChiefEngineerArchitecturalSupervisionRegister() {
        if (_fkChiefEngineerArchitecturalSupervisionRegister == null)
            _fkChiefEngineerArchitecturalSupervisionRegister = new UserSystem(this, Keys.ARCHITECTURAL_SUPERVISION_REGISTER__FK_CHIEF_ENGINEER_ARCHITECTURAL_SUPERVISION_REGISTER);

        return _fkChiefEngineerArchitecturalSupervisionRegister;
    }

    @Override
    public ArchitecturalSupervisionRegister as(String alias) {
        return new ArchitecturalSupervisionRegister(DSL.name(alias), this);
    }

    @Override
    public ArchitecturalSupervisionRegister as(Name alias) {
        return new ArchitecturalSupervisionRegister(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchitecturalSupervisionRegister rename(String name) {
        return new ArchitecturalSupervisionRegister(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchitecturalSupervisionRegister rename(Name name) {
        return new ArchitecturalSupervisionRegister(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, LocalDateTime, Integer, LocalDateTime, Integer, String, String, Long, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
