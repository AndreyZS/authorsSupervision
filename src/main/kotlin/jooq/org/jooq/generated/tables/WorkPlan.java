/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.WorkPlanRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkPlan extends TableImpl<WorkPlanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>work_plan</code>
     */
    public static final WorkPlan WORK_PLAN = new WorkPlan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkPlanRecord> getRecordType() {
        return WorkPlanRecord.class;
    }

    /**
     * The column <code>work_plan.id</code>.
     */
    public final TableField<WorkPlanRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>work_plan.name</code>.
     */
    public final TableField<WorkPlanRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>work_plan.aboutupdate</code>.
     */
    public final TableField<WorkPlanRecord, String> ABOUTUPDATE = createField(DSL.name("aboutupdate"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>work_plan.dateupdate</code>.
     */
    public final TableField<WorkPlanRecord, LocalDateTime> DATEUPDATE = createField(DSL.name("dateupdate"), SQLDataType.LOCALDATETIME(6), this, "");

    private WorkPlan(Name alias, Table<WorkPlanRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkPlan(Name alias, Table<WorkPlanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>work_plan</code> table reference
     */
    public WorkPlan(String alias) {
        this(DSL.name(alias), WORK_PLAN);
    }

    /**
     * Create an aliased <code>work_plan</code> table reference
     */
    public WorkPlan(Name alias) {
        this(alias, WORK_PLAN);
    }

    /**
     * Create a <code>work_plan</code> table reference
     */
    public WorkPlan() {
        this(DSL.name("work_plan"), null);
    }

    public <O extends Record> WorkPlan(Table<O> child, ForeignKey<O, WorkPlanRecord> key) {
        super(child, key, WORK_PLAN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<WorkPlanRecord, Long> getIdentity() {
        return (Identity<WorkPlanRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkPlanRecord> getPrimaryKey() {
        return Keys.WORK_PLAN_PKEY;
    }

    @Override
    public WorkPlan as(String alias) {
        return new WorkPlan(DSL.name(alias), this);
    }

    @Override
    public WorkPlan as(Name alias) {
        return new WorkPlan(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkPlan rename(String name) {
        return new WorkPlan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkPlan rename(Name name) {
        return new WorkPlan(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
