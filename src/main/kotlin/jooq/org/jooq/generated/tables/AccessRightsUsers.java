/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.AccessRightsUsersRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessRightsUsers extends TableImpl<AccessRightsUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>access_rights_users</code>
     */
    public static final AccessRightsUsers ACCESS_RIGHTS_USERS = new AccessRightsUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccessRightsUsersRecord> getRecordType() {
        return AccessRightsUsersRecord.class;
    }

    /**
     * The column <code>access_rights_users.uses_system</code>.
     */
    public final TableField<AccessRightsUsersRecord, Long> USES_SYSTEM = createField(DSL.name("uses_system"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>access_rights_users.access_rights_id</code>.
     */
    public final TableField<AccessRightsUsersRecord, Long> ACCESS_RIGHTS_ID = createField(DSL.name("access_rights_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private AccessRightsUsers(Name alias, Table<AccessRightsUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccessRightsUsers(Name alias, Table<AccessRightsUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>access_rights_users</code> table reference
     */
    public AccessRightsUsers(String alias) {
        this(DSL.name(alias), ACCESS_RIGHTS_USERS);
    }

    /**
     * Create an aliased <code>access_rights_users</code> table reference
     */
    public AccessRightsUsers(Name alias) {
        this(alias, ACCESS_RIGHTS_USERS);
    }

    /**
     * Create a <code>access_rights_users</code> table reference
     */
    public AccessRightsUsers() {
        this(DSL.name("access_rights_users"), null);
    }

    public <O extends Record> AccessRightsUsers(Table<O> child, ForeignKey<O, AccessRightsUsersRecord> key) {
        super(child, key, ACCESS_RIGHTS_USERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<AccessRightsUsersRecord, Long> getIdentity() {
        return (Identity<AccessRightsUsersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccessRightsUsersRecord> getPrimaryKey() {
        return Keys.ACCESS_RIGHTS_USERS_PKEY;
    }

    @Override
    public List<ForeignKey<AccessRightsUsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCESS_RIGHTS_USERS__FK_USER_SYSTEM_ID, Keys.ACCESS_RIGHTS_USERS__FK_ACCESS_RIGHT_ID);
    }

    private transient UserSystem _userSystem;
    private transient AccessRights _accessRights;

    public UserSystem userSystem() {
        if (_userSystem == null)
            _userSystem = new UserSystem(this, Keys.ACCESS_RIGHTS_USERS__FK_USER_SYSTEM_ID);

        return _userSystem;
    }

    public AccessRights accessRights() {
        if (_accessRights == null)
            _accessRights = new AccessRights(this, Keys.ACCESS_RIGHTS_USERS__FK_ACCESS_RIGHT_ID);

        return _accessRights;
    }

    @Override
    public AccessRightsUsers as(String alias) {
        return new AccessRightsUsers(DSL.name(alias), this);
    }

    @Override
    public AccessRightsUsers as(Name alias) {
        return new AccessRightsUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessRightsUsers rename(String name) {
        return new AccessRightsUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessRightsUsers rename(Name name) {
        return new AccessRightsUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
