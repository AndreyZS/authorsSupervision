/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArchitecturalSupervisionRegister implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long          id;
    private final Long          employeeId;
    private final LocalDateTime accordingScheduleDate;
    private final Integer       accordingShift;
    private final LocalDateTime actualVerificationDate;
    private final Integer       actualVerificationShift;
    private final String        identifiedInconsistencies;
    private final String        reasonsNoncompliance;
    private final Long          chiefEngineer;
    private final LocalDateTime datecheck;

    public ArchitecturalSupervisionRegister(ArchitecturalSupervisionRegister value) {
        this.id = value.id;
        this.employeeId = value.employeeId;
        this.accordingScheduleDate = value.accordingScheduleDate;
        this.accordingShift = value.accordingShift;
        this.actualVerificationDate = value.actualVerificationDate;
        this.actualVerificationShift = value.actualVerificationShift;
        this.identifiedInconsistencies = value.identifiedInconsistencies;
        this.reasonsNoncompliance = value.reasonsNoncompliance;
        this.chiefEngineer = value.chiefEngineer;
        this.datecheck = value.datecheck;
    }

    public ArchitecturalSupervisionRegister(
        Long          id,
        Long          employeeId,
        LocalDateTime accordingScheduleDate,
        Integer       accordingShift,
        LocalDateTime actualVerificationDate,
        Integer       actualVerificationShift,
        String        identifiedInconsistencies,
        String        reasonsNoncompliance,
        Long          chiefEngineer,
        LocalDateTime datecheck
    ) {
        this.id = id;
        this.employeeId = employeeId;
        this.accordingScheduleDate = accordingScheduleDate;
        this.accordingShift = accordingShift;
        this.actualVerificationDate = actualVerificationDate;
        this.actualVerificationShift = actualVerificationShift;
        this.identifiedInconsistencies = identifiedInconsistencies;
        this.reasonsNoncompliance = reasonsNoncompliance;
        this.chiefEngineer = chiefEngineer;
        this.datecheck = datecheck;
    }

    /**
     * Getter for <code>architectural_supervision_register.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>architectural_supervision_register.employee_id</code>.
     */
    public Long getEmployeeId() {
        return this.employeeId;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.according_schedule_date</code>.
     */
    public LocalDateTime getAccordingScheduleDate() {
        return this.accordingScheduleDate;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.according_shift</code>.
     */
    public Integer getAccordingShift() {
        return this.accordingShift;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.actual_verification_date</code>.
     */
    public LocalDateTime getActualVerificationDate() {
        return this.actualVerificationDate;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.actual_verification_shift</code>.
     */
    public Integer getActualVerificationShift() {
        return this.actualVerificationShift;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.identified_inconsistencies</code>.
     */
    public String getIdentifiedInconsistencies() {
        return this.identifiedInconsistencies;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.reasons_noncompliance</code>.
     */
    public String getReasonsNoncompliance() {
        return this.reasonsNoncompliance;
    }

    /**
     * Getter for
     * <code>architectural_supervision_register.chief_engineer</code>.
     */
    public Long getChiefEngineer() {
        return this.chiefEngineer;
    }

    /**
     * Getter for <code>architectural_supervision_register.datecheck</code>.
     */
    public LocalDateTime getDatecheck() {
        return this.datecheck;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ArchitecturalSupervisionRegister other = (ArchitecturalSupervisionRegister) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (employeeId == null) {
            if (other.employeeId != null)
                return false;
        }
        else if (!employeeId.equals(other.employeeId))
            return false;
        if (accordingScheduleDate == null) {
            if (other.accordingScheduleDate != null)
                return false;
        }
        else if (!accordingScheduleDate.equals(other.accordingScheduleDate))
            return false;
        if (accordingShift == null) {
            if (other.accordingShift != null)
                return false;
        }
        else if (!accordingShift.equals(other.accordingShift))
            return false;
        if (actualVerificationDate == null) {
            if (other.actualVerificationDate != null)
                return false;
        }
        else if (!actualVerificationDate.equals(other.actualVerificationDate))
            return false;
        if (actualVerificationShift == null) {
            if (other.actualVerificationShift != null)
                return false;
        }
        else if (!actualVerificationShift.equals(other.actualVerificationShift))
            return false;
        if (identifiedInconsistencies == null) {
            if (other.identifiedInconsistencies != null)
                return false;
        }
        else if (!identifiedInconsistencies.equals(other.identifiedInconsistencies))
            return false;
        if (reasonsNoncompliance == null) {
            if (other.reasonsNoncompliance != null)
                return false;
        }
        else if (!reasonsNoncompliance.equals(other.reasonsNoncompliance))
            return false;
        if (chiefEngineer == null) {
            if (other.chiefEngineer != null)
                return false;
        }
        else if (!chiefEngineer.equals(other.chiefEngineer))
            return false;
        if (datecheck == null) {
            if (other.datecheck != null)
                return false;
        }
        else if (!datecheck.equals(other.datecheck))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.employeeId == null) ? 0 : this.employeeId.hashCode());
        result = prime * result + ((this.accordingScheduleDate == null) ? 0 : this.accordingScheduleDate.hashCode());
        result = prime * result + ((this.accordingShift == null) ? 0 : this.accordingShift.hashCode());
        result = prime * result + ((this.actualVerificationDate == null) ? 0 : this.actualVerificationDate.hashCode());
        result = prime * result + ((this.actualVerificationShift == null) ? 0 : this.actualVerificationShift.hashCode());
        result = prime * result + ((this.identifiedInconsistencies == null) ? 0 : this.identifiedInconsistencies.hashCode());
        result = prime * result + ((this.reasonsNoncompliance == null) ? 0 : this.reasonsNoncompliance.hashCode());
        result = prime * result + ((this.chiefEngineer == null) ? 0 : this.chiefEngineer.hashCode());
        result = prime * result + ((this.datecheck == null) ? 0 : this.datecheck.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ArchitecturalSupervisionRegister (");

        sb.append(id);
        sb.append(", ").append(employeeId);
        sb.append(", ").append(accordingScheduleDate);
        sb.append(", ").append(accordingShift);
        sb.append(", ").append(actualVerificationDate);
        sb.append(", ").append(actualVerificationShift);
        sb.append(", ").append(identifiedInconsistencies);
        sb.append(", ").append(reasonsNoncompliance);
        sb.append(", ").append(chiefEngineer);
        sb.append(", ").append(datecheck);

        sb.append(")");
        return sb.toString();
    }
}
