/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.generated.tables.AccessRightsUsers;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessRightsUsersRecord extends UpdatableRecordImpl<AccessRightsUsersRecord> implements Record2<Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>access_rights_users.uses_system</code>.
     */
    public AccessRightsUsersRecord setUsesSystem(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>access_rights_users.uses_system</code>.
     */
    public Long getUsesSystem() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>access_rights_users.access_rights_id</code>.
     */
    public AccessRightsUsersRecord setAccessRightsId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>access_rights_users.access_rights_id</code>.
     */
    public Long getAccessRightsId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AccessRightsUsers.ACCESS_RIGHTS_USERS.USES_SYSTEM;
    }

    @Override
    public Field<Long> field2() {
        return AccessRightsUsers.ACCESS_RIGHTS_USERS.ACCESS_RIGHTS_ID;
    }

    @Override
    public Long component1() {
        return getUsesSystem();
    }

    @Override
    public Long component2() {
        return getAccessRightsId();
    }

    @Override
    public Long value1() {
        return getUsesSystem();
    }

    @Override
    public Long value2() {
        return getAccessRightsId();
    }

    @Override
    public AccessRightsUsersRecord value1(Long value) {
        setUsesSystem(value);
        return this;
    }

    @Override
    public AccessRightsUsersRecord value2(Long value) {
        setAccessRightsId(value);
        return this;
    }

    @Override
    public AccessRightsUsersRecord values(Long value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccessRightsUsersRecord
     */
    public AccessRightsUsersRecord() {
        super(AccessRightsUsers.ACCESS_RIGHTS_USERS);
    }

    /**
     * Create a detached, initialised AccessRightsUsersRecord
     */
    public AccessRightsUsersRecord(Long usesSystem, Long accessRightsId) {
        super(AccessRightsUsers.ACCESS_RIGHTS_USERS);

        setUsesSystem(usesSystem);
        setAccessRightsId(accessRightsId);
    }

    /**
     * Create a detached, initialised AccessRightsUsersRecord
     */
    public AccessRightsUsersRecord(org.jooq.generated.tables.pojos.AccessRightsUsers value) {
        super(AccessRightsUsers.ACCESS_RIGHTS_USERS);

        if (value != null) {
            setUsesSystem(value.getUsesSystem());
            setAccessRightsId(value.getAccessRightsId());
        }
    }
}
