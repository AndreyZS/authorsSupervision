/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.HistoryPasswordRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HistoryPassword extends TableImpl<HistoryPasswordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>history_password</code>
     */
    public static final HistoryPassword HISTORY_PASSWORD = new HistoryPassword();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HistoryPasswordRecord> getRecordType() {
        return HistoryPasswordRecord.class;
    }

    /**
     * The column <code>history_password.id</code>.
     */
    public final TableField<HistoryPasswordRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>history_password.password</code>.
     */
    public final TableField<HistoryPasswordRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>history_password.date</code>.
     */
    public final TableField<HistoryPasswordRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>history_password.user_id</code>.
     */
    public final TableField<HistoryPasswordRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private HistoryPassword(Name alias, Table<HistoryPasswordRecord> aliased) {
        this(alias, aliased, null);
    }

    private HistoryPassword(Name alias, Table<HistoryPasswordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>history_password</code> table reference
     */
    public HistoryPassword(String alias) {
        this(DSL.name(alias), HISTORY_PASSWORD);
    }

    /**
     * Create an aliased <code>history_password</code> table reference
     */
    public HistoryPassword(Name alias) {
        this(alias, HISTORY_PASSWORD);
    }

    /**
     * Create a <code>history_password</code> table reference
     */
    public HistoryPassword() {
        this(DSL.name("history_password"), null);
    }

    public <O extends Record> HistoryPassword(Table<O> child, ForeignKey<O, HistoryPasswordRecord> key) {
        super(child, key, HISTORY_PASSWORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<HistoryPasswordRecord, Long> getIdentity() {
        return (Identity<HistoryPasswordRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<HistoryPasswordRecord> getPrimaryKey() {
        return Keys.HISTORY_PASSWORD_PKEY;
    }

    @Override
    public List<ForeignKey<HistoryPasswordRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HISTORY_PASSWORD__FK_USER_HISTORY_PASSWORD);
    }

    private transient UserSystem _userSystem;

    public UserSystem userSystem() {
        if (_userSystem == null)
            _userSystem = new UserSystem(this, Keys.HISTORY_PASSWORD__FK_USER_HISTORY_PASSWORD);

        return _userSystem;
    }

    @Override
    public HistoryPassword as(String alias) {
        return new HistoryPassword(DSL.name(alias), this);
    }

    @Override
    public HistoryPassword as(Name alias) {
        return new HistoryPassword(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HistoryPassword rename(String name) {
        return new HistoryPassword(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HistoryPassword rename(Name name) {
        return new HistoryPassword(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, LocalDate, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
