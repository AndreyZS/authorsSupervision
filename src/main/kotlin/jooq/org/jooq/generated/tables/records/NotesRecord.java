/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.generated.tables.Notes;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotesRecord extends UpdatableRecordImpl<NotesRecord> implements Record4<Long, String, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>notes.id</code>.
     */
    public NotesRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>notes.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>notes.name</code>.
     */
    public NotesRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>notes.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>notes.text</code>.
     */
    public NotesRecord setText(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>notes.text</code>.
     */
    public String getText() {
        return (String) get(2);
    }

    /**
     * Setter for <code>notes.architectural_supervision_schedule_id</code>.
     */
    public NotesRecord setArchitecturalSupervisionScheduleId(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>notes.architectural_supervision_schedule_id</code>.
     */
    public Long getArchitecturalSupervisionScheduleId() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Notes.NOTES.ID;
    }

    @Override
    public Field<String> field2() {
        return Notes.NOTES.NAME;
    }

    @Override
    public Field<String> field3() {
        return Notes.NOTES.TEXT;
    }

    @Override
    public Field<Long> field4() {
        return Notes.NOTES.ARCHITECTURAL_SUPERVISION_SCHEDULE_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getText();
    }

    @Override
    public Long component4() {
        return getArchitecturalSupervisionScheduleId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getText();
    }

    @Override
    public Long value4() {
        return getArchitecturalSupervisionScheduleId();
    }

    @Override
    public NotesRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public NotesRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public NotesRecord value3(String value) {
        setText(value);
        return this;
    }

    @Override
    public NotesRecord value4(Long value) {
        setArchitecturalSupervisionScheduleId(value);
        return this;
    }

    @Override
    public NotesRecord values(Long value1, String value2, String value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotesRecord
     */
    public NotesRecord() {
        super(Notes.NOTES);
    }

    /**
     * Create a detached, initialised NotesRecord
     */
    public NotesRecord(Long id, String name, String text, Long architecturalSupervisionScheduleId) {
        super(Notes.NOTES);

        setId(id);
        setName(name);
        setText(text);
        setArchitecturalSupervisionScheduleId(architecturalSupervisionScheduleId);
    }

    /**
     * Create a detached, initialised NotesRecord
     */
    public NotesRecord(org.jooq.generated.tables.pojos.Notes value) {
        super(Notes.NOTES);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setText(value.getText());
            setArchitecturalSupervisionScheduleId(value.getArchitecturalSupervisionScheduleId());
        }
    }
}
